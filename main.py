# Менеджер задач
#
# Задача: Создай класс `Task`, который позволяет управлять задачами (делами).
# У задачи должны быть атрибуты: описание задачи, срок выполнения и статус
# (выполнено/не выполнено). Реализуй функцию для добавления задач,
# отметки выполненных задач и вывода списка текущих (не выполненных) задач.

class Task:
    # Классовый атрибут для хранения всех задач
    all_tasks = []

    def __init__(self, description, deadline):
        self.description = description
        self.deadline = deadline
        self.status = "не выполнено"
        # Добавляем новую задачу в список всех задач
        Task.all_tasks.append(self)

    @classmethod
    def add_task(cls, description, deadline):
        # Создаем новую задачу и добавляем её в список всех задач
        task = cls(description, deadline)
        print(f"Задача добавлена: {task}")
        return task

    @classmethod
    def mark_as_completed(cls, description):
        # Ищем задачу по описанию и отмечаем её как выполненную
        for task in cls.all_tasks:
            if task.description == description:
                task.status = "выполнено"
                print(f"Задача отмечена как выполненная: {task}")
                return
        print(f"Задача с описанием '{description}' не найдена.")

    @classmethod
    def list_current_tasks(cls):
        # Выводим список текущих (не выполненных) задач
        current_tasks = [task for task in cls.all_tasks if task.status == "не выполнено"]
        if current_tasks:
            print("Текущие задачи:")
            for task in current_tasks:
                print(task)
        else:
            print("Нет текущих задач.")

    def __str__(self):
        return f"Задача: {self.description}, Срок: {self.deadline}, Статус: {self.status}"

# Пример использования
if __name__ == "__main__":
    # Добавление задач
    Task.add_task("Сделать уборку", "12-01-2025")
    Task.add_task("Купить продукты", "15-01-2025")

    # Отметка задачи как выполненной
    Task.mark_as_completed("Сделать уборку")

    # Вывод списка текущих задач
    Task.list_current_tasks()

    print("\n")


    # *Дополнительное задание:
    #
    # Ты разрабатываешь программное обеспечение для сети магазинов.
    # Каждый магазин в этой сети имеет свои особенности, но также существуют
    # общие характеристики, такие как адрес, название и ассортимент товаров.
    # Задача — создать класс `Store`, который можно будет использовать
    # для создания различных магазинов.
    #
    # Шаги:
    #
    # 1. Создай класс `Store`:
    # # -Атрибуты класса:
    # # - `name`: название магазина.
    # # - `address`: адрес магазина.
    # # - `items`: словарь, где ключ - название товара, а значение - его цена. Например, `{'apples': 0.5, 'bananas': 0.75}`.
    #
    # - Методы класса:
    # # - `__init__ - конструктор, который инициализирует название и адрес,
    # а также пустой словарь для `items`.

    # # - метод для добавления товара в ассортимент.
    # # - метод для удаления товара из ассортимента.
    # # - метод для получения цены товара по его названию.
    # Если товар отсутствует, возвращайте `None`.

    # # - метод для обновления цены товара.
    #
    # 2. Создай несколько объектов класса `Store`:
    #
    # Создай не менее трех различных магазинов с разными названиями, адресами
    # и добавь в каждый из них несколько товаров.
    #
    # 3. Протестировать методы:
    #
    # Выбери один из созданных магазинов и протестируй все его методы:
    # добавь товар, обнови цену, убери товар и запрашивай цену.
    #
    # В поле для ответа загрузи ссылку на GitHub-репозиторий,
    # содержащий код проекта с реализацией задания.\n



    class Store:  # Создание и инициализация класса
        def __init__(self, name, address):  # Создание атрибутов класса
            self.name = name  # Название магазина
            self.address = address  # Адрес магазина
            self.items = {}  # Создание пустого словаря, куда будут добавляться товары с ценами

            # Создание методов

        def add_item(self, item_name, price):  # Метод для добавления товара в ассортимент
            self.items[item_name] = price
            print(f"Товар '{item_name}' добавлен с ценой {price}.")

        def remove_item(self, item_name):  # Метод для удаления товара из ассортимента по названию
            if item_name in self.items:  # Проверка наличия товара в ассортименте
                del self.items[item_name]  # Удаление товара из ассортимента
                print(f"Товар '{item_name}' удален.")  # Вывод сообщения об удалении товара
            else:
                print(f"Товар '{item_name}' не найден.")  # Вывод сообщения об отсутствии товара в ассортименте

        def get_price(self, item_name):  # Метод для получения цены товара по его названию
            return self.items.get(item_name, None)  # Возвращает цену товара или None в случае его отсутствия

        def update_price(self, item_name, new_price):  # Метод для обновления цены товара
            if item_name in self.items:  # Проверка наличия товара в ассортименте
                self.items[item_name] = new_price  # Обновление цены
                print(
                    f"Цена товара '{item_name}' обновлена до {new_price}.")  # Вывод сообщения об обновлении цены на товар
            else:
                print(f"Товар '{item_name}' не найден.")  # Вывод сообщения об отсутствии товара


    # Создание нескольких объектов класса `Store`
    store1 = Store("Магазин у дома", "ул. Ленина, 12")
    store2 = Store("Супермаркет", "пр. Мира, 45")
    store3 = Store("ЭкоМаркет", "ул. Победы, 8")

    # Добавление товаров в магазины
    store1.add_item("Яблоки", 139.99)
    store1.add_item("Бананы", 179.99)
    store2.add_item("Хлеб", 34.99)
    store2.add_item("Молоко", 89.99)
    store3.add_item("Орехи", 1250.99)
    store3.add_item("Мёд", 280.99)

    # Тестирование методов на одном из магазинов
    print("\nТестирование методов для 'Магазин у дома':")
    store1.add_item("Груши", 249.99)
    print(f"Цена на 'Яблоки': {store1.get_price('Яблоки')}")
    store1.update_price("Яблоки", 149.99)
    print(f"Обновленная цена на 'Яблоки': {store1.get_price('Яблоки')}")
    store1.remove_item("Бананы")
    print(f"Цена на 'Бананы': {store1.get_price('Бананы')}")











